name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Configure application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      - name: Set execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build Application (Skip Tests)
        run: ./gradlew clean build -x test
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_HOST_NAME: ${{ secrets.DB_HOST_NAME }}
          DB_HOST_PASSWORD: ${{ secrets.DB_HOST_PASSWORD }}

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/mj-cafeteria-team-feedback-be-0.0.1-SNAPSHOT.jar
          retention-days: 1

  deploy:
    name: Deploy Application
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: artifact

      - name: Create EC2 Key Pair File
        run: echo "${{ secrets.EC2_KEY_PAIR }}" | base64 --decode > keypair-han.pem

      - name: Set Key File Permissions
        run: chmod 600 keypair-han.pem

      - name: Debug EC2_HOST value
        run: echo "EC2_HOST is $EC2_HOST"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Add EC2 to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Deploy JAR to EC2
        run: |
          JAR_NAME=$(find artifact -name "*.jar" | head -n 1)
          scp -i keypair-han.pem $JAR_NAME ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/mj-feedback-spring.jar
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Copy systemd service file to EC2
        run: |
          scp -i keypair-han.pem infra/mj-feedback.service ubuntu@${{ secrets.EC2_HOST }}:/tmp/mj-feedback.service
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Copy application.yml to EC2
        run: |
          echo "${{ secrets.APPLICATION_YML }}" > application.yml
          scp -i keypair-han.pem application.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/application.yml
          rm application.yml
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Register systemd service on EC2
        run: |
          ssh -i keypair-han.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            sudo mv /tmp/mj-feedback.service /etc/systemd/system/mj-feedback.service
            sudo systemctl daemon-reload
            sudo systemctl enable mj-feedback
          EOF
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Restart Application Service
        run: |
          ssh -i keypair-han.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            sudo systemctl restart mj-feedback
          EOF
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Clean Up Key File
        run: rm -f keypair-han.pem
